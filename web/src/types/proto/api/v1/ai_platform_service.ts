// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: api/v1/ai_platform_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Empty } from "../../google/protobuf/empty";
import { FieldMask } from "../../google/protobuf/field_mask";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "memos.api.v1";

/** Platform type enum */
export enum PlatformType {
  UNSPECIFIED = "UNSPECIFIED",
  OLLAMA = "OLLAMA",
  DEEPSEEK = "DEEPSEEK",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function platformTypeFromJSON(object: any): PlatformType {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return PlatformType.UNSPECIFIED;
    case 1:
    case "OLLAMA":
      return PlatformType.OLLAMA;
    case 2:
    case "DEEPSEEK":
      return PlatformType.DEEPSEEK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PlatformType.UNRECOGNIZED;
  }
}

export function platformTypeToNumber(object: PlatformType): number {
  switch (object) {
    case PlatformType.UNSPECIFIED:
      return 0;
    case PlatformType.OLLAMA:
      return 1;
    case PlatformType.DEEPSEEK:
      return 2;
    case PlatformType.UNRECOGNIZED:
    default:
      return -1;
  }
}

/** AI Platform resource */
export interface AIPlatform {
  /** Unique identifier for the platform instance */
  id: number;
  /** The platform type */
  platformType: PlatformType;
  /** The URL of the AI platform API */
  url: string;
  /** The access key for authenticating with the AI platform */
  accessKey: string;
  /** A user-friendly display name for the AI platform */
  displayName: string;
  /** Optional description of the AI platform */
  description: string;
  /** The model name to use for this platform */
  model: string;
  /** Creation timestamp */
  createTime?:
    | Date
    | undefined;
  /** Last update timestamp */
  updateTime?: Date | undefined;
}

/** Request message for CreateAIPlatform */
export interface CreateAIPlatformRequest {
  /**
   * The AI platform to create
   * Note: The id field will be auto-generated by the server if not provided
   */
  platform?: AIPlatform | undefined;
}

/** Request message for ListAIPlatforms */
export interface ListAIPlatformsRequest {
  /** Maximum number of platforms to return */
  pageSize: number;
  /** Page token received from a previous ListAIPlatforms call */
  pageToken: string;
}

/** Response message for ListAIPlatforms */
export interface ListAIPlatformsResponse {
  /** The list of AI platforms */
  platforms: AIPlatform[];
  /** A token to retrieve the next page of results */
  nextPageToken: string;
}

/** Request message for GetAIPlatform */
export interface GetAIPlatformRequest {
  /** The unique identifier of the AI platform to retrieve */
  id: number;
}

/** Request message for UpdateAIPlatform */
export interface UpdateAIPlatformRequest {
  /** The AI platform with updated fields */
  platform?:
    | AIPlatform
    | undefined;
  /** The list of fields to update */
  updateMask?: string[] | undefined;
}

/** Request message for DeleteAIPlatform */
export interface DeleteAIPlatformRequest {
  /** The unique identifier of the AI platform to delete */
  id: number;
}

/** Request message for GenerateAnswer */
export interface GenerateAnswerRequest {
  /** The unique identifier of the AI platform to use */
  id: number;
  prompt: string;
}

/** Response message for GenerateAnswer */
export interface GenerateAnswerResponse {
  success: boolean;
  answer: string;
  errorMessage: string;
}

/** Request message for ListPlatformTypes */
export interface ListPlatformTypesRequest {
}

/** Response message for ListPlatformTypes */
export interface ListPlatformTypesResponse {
  /** List of available platform types */
  platformTypes: PlatformType[];
}

function createBaseAIPlatform(): AIPlatform {
  return {
    id: 0,
    platformType: PlatformType.UNSPECIFIED,
    url: "",
    accessKey: "",
    displayName: "",
    description: "",
    model: "",
    createTime: undefined,
    updateTime: undefined,
  };
}

export const AIPlatform: MessageFns<AIPlatform> = {
  encode(message: AIPlatform, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.platformType !== PlatformType.UNSPECIFIED) {
      writer.uint32(16).int32(platformTypeToNumber(message.platformType));
    }
    if (message.url !== "") {
      writer.uint32(26).string(message.url);
    }
    if (message.accessKey !== "") {
      writer.uint32(34).string(message.accessKey);
    }
    if (message.displayName !== "") {
      writer.uint32(42).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(50).string(message.description);
    }
    if (message.model !== "") {
      writer.uint32(58).string(message.model);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(66).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AIPlatform {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAIPlatform();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.platformType = platformTypeFromJSON(reader.int32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.accessKey = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.model = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AIPlatform>): AIPlatform {
    return AIPlatform.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AIPlatform>): AIPlatform {
    const message = createBaseAIPlatform();
    message.id = object.id ?? 0;
    message.platformType = object.platformType ?? PlatformType.UNSPECIFIED;
    message.url = object.url ?? "";
    message.accessKey = object.accessKey ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.model = object.model ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseCreateAIPlatformRequest(): CreateAIPlatformRequest {
  return { platform: undefined };
}

export const CreateAIPlatformRequest: MessageFns<CreateAIPlatformRequest> = {
  encode(message: CreateAIPlatformRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.platform !== undefined) {
      AIPlatform.encode(message.platform, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAIPlatformRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAIPlatformRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.platform = AIPlatform.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CreateAIPlatformRequest>): CreateAIPlatformRequest {
    return CreateAIPlatformRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAIPlatformRequest>): CreateAIPlatformRequest {
    const message = createBaseCreateAIPlatformRequest();
    message.platform = (object.platform !== undefined && object.platform !== null)
      ? AIPlatform.fromPartial(object.platform)
      : undefined;
    return message;
  },
};

function createBaseListAIPlatformsRequest(): ListAIPlatformsRequest {
  return { pageSize: 0, pageToken: "" };
}

export const ListAIPlatformsRequest: MessageFns<ListAIPlatformsRequest> = {
  encode(message: ListAIPlatformsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAIPlatformsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAIPlatformsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListAIPlatformsRequest>): ListAIPlatformsRequest {
    return ListAIPlatformsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAIPlatformsRequest>): ListAIPlatformsRequest {
    const message = createBaseListAIPlatformsRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAIPlatformsResponse(): ListAIPlatformsResponse {
  return { platforms: [], nextPageToken: "" };
}

export const ListAIPlatformsResponse: MessageFns<ListAIPlatformsResponse> = {
  encode(message: ListAIPlatformsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.platforms) {
      AIPlatform.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAIPlatformsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAIPlatformsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.platforms.push(AIPlatform.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListAIPlatformsResponse>): ListAIPlatformsResponse {
    return ListAIPlatformsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAIPlatformsResponse>): ListAIPlatformsResponse {
    const message = createBaseListAIPlatformsResponse();
    message.platforms = object.platforms?.map((e) => AIPlatform.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetAIPlatformRequest(): GetAIPlatformRequest {
  return { id: 0 };
}

export const GetAIPlatformRequest: MessageFns<GetAIPlatformRequest> = {
  encode(message: GetAIPlatformRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAIPlatformRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAIPlatformRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetAIPlatformRequest>): GetAIPlatformRequest {
    return GetAIPlatformRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAIPlatformRequest>): GetAIPlatformRequest {
    const message = createBaseGetAIPlatformRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseUpdateAIPlatformRequest(): UpdateAIPlatformRequest {
  return { platform: undefined, updateMask: undefined };
}

export const UpdateAIPlatformRequest: MessageFns<UpdateAIPlatformRequest> = {
  encode(message: UpdateAIPlatformRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.platform !== undefined) {
      AIPlatform.encode(message.platform, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAIPlatformRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAIPlatformRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.platform = AIPlatform.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateAIPlatformRequest>): UpdateAIPlatformRequest {
    return UpdateAIPlatformRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAIPlatformRequest>): UpdateAIPlatformRequest {
    const message = createBaseUpdateAIPlatformRequest();
    message.platform = (object.platform !== undefined && object.platform !== null)
      ? AIPlatform.fromPartial(object.platform)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteAIPlatformRequest(): DeleteAIPlatformRequest {
  return { id: 0 };
}

export const DeleteAIPlatformRequest: MessageFns<DeleteAIPlatformRequest> = {
  encode(message: DeleteAIPlatformRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAIPlatformRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAIPlatformRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeleteAIPlatformRequest>): DeleteAIPlatformRequest {
    return DeleteAIPlatformRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAIPlatformRequest>): DeleteAIPlatformRequest {
    const message = createBaseDeleteAIPlatformRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseGenerateAnswerRequest(): GenerateAnswerRequest {
  return { id: 0, prompt: "" };
}

export const GenerateAnswerRequest: MessageFns<GenerateAnswerRequest> = {
  encode(message: GenerateAnswerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.prompt !== "") {
      writer.uint32(18).string(message.prompt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateAnswerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateAnswerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.prompt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GenerateAnswerRequest>): GenerateAnswerRequest {
    return GenerateAnswerRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateAnswerRequest>): GenerateAnswerRequest {
    const message = createBaseGenerateAnswerRequest();
    message.id = object.id ?? 0;
    message.prompt = object.prompt ?? "";
    return message;
  },
};

function createBaseGenerateAnswerResponse(): GenerateAnswerResponse {
  return { success: false, answer: "", errorMessage: "" };
}

export const GenerateAnswerResponse: MessageFns<GenerateAnswerResponse> = {
  encode(message: GenerateAnswerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.answer !== "") {
      writer.uint32(18).string(message.answer);
    }
    if (message.errorMessage !== "") {
      writer.uint32(26).string(message.errorMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateAnswerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateAnswerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.answer = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GenerateAnswerResponse>): GenerateAnswerResponse {
    return GenerateAnswerResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateAnswerResponse>): GenerateAnswerResponse {
    const message = createBaseGenerateAnswerResponse();
    message.success = object.success ?? false;
    message.answer = object.answer ?? "";
    message.errorMessage = object.errorMessage ?? "";
    return message;
  },
};

function createBaseListPlatformTypesRequest(): ListPlatformTypesRequest {
  return {};
}

export const ListPlatformTypesRequest: MessageFns<ListPlatformTypesRequest> = {
  encode(_: ListPlatformTypesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPlatformTypesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPlatformTypesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListPlatformTypesRequest>): ListPlatformTypesRequest {
    return ListPlatformTypesRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ListPlatformTypesRequest>): ListPlatformTypesRequest {
    const message = createBaseListPlatformTypesRequest();
    return message;
  },
};

function createBaseListPlatformTypesResponse(): ListPlatformTypesResponse {
  return { platformTypes: [] };
}

export const ListPlatformTypesResponse: MessageFns<ListPlatformTypesResponse> = {
  encode(message: ListPlatformTypesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.platformTypes) {
      writer.int32(platformTypeToNumber(v));
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPlatformTypesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPlatformTypesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.platformTypes.push(platformTypeFromJSON(reader.int32()));

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.platformTypes.push(platformTypeFromJSON(reader.int32()));
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListPlatformTypesResponse>): ListPlatformTypesResponse {
    return ListPlatformTypesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPlatformTypesResponse>): ListPlatformTypesResponse {
    const message = createBaseListPlatformTypesResponse();
    message.platformTypes = object.platformTypes?.map((e) => e) || [];
    return message;
  },
};

/** AI Platform service definition */
export type AIPlatformServiceDefinition = typeof AIPlatformServiceDefinition;
export const AIPlatformServiceDefinition = {
  name: "AIPlatformService",
  fullName: "memos.api.v1.AIPlatformService",
  methods: {
    /** Create a new AI platform */
    createAIPlatform: {
      name: "CreateAIPlatform",
      requestType: CreateAIPlatformRequest,
      requestStream: false,
      responseType: AIPlatform,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              32,
              58,
              8,
              112,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              34,
              20,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              97,
              105,
              45,
              112,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              115,
            ]),
          ],
        },
      },
    },
    /** List all AI platforms */
    listAIPlatforms: {
      name: "ListAIPlatforms",
      requestType: ListAIPlatformsRequest,
      requestStream: false,
      responseType: ListAIPlatformsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              22,
              18,
              20,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              97,
              105,
              45,
              112,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              115,
            ]),
          ],
        },
      },
    },
    /** List all available platform types */
    listPlatformTypes: {
      name: "ListPlatformTypes",
      requestType: ListPlatformTypesRequest,
      requestStream: false,
      responseType: ListPlatformTypesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              28,
              18,
              26,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              97,
              105,
              45,
              112,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              115,
              47,
              116,
              121,
              112,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Get a specific AI platform */
    getAIPlatform: {
      name: "GetAIPlatform",
      requestType: GetAIPlatformRequest,
      requestStream: false,
      responseType: AIPlatform,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              27,
              18,
              25,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              97,
              105,
              45,
              112,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              115,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Update an existing AI platform */
    updateAIPlatform: {
      name: "UpdateAIPlatform",
      requestType: UpdateAIPlatformRequest,
      requestStream: false,
      responseType: AIPlatform,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              46,
              58,
              8,
              112,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              50,
              34,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              97,
              105,
              45,
              112,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              115,
              47,
              123,
              112,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              46,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Delete an AI platform */
    deleteAIPlatform: {
      name: "DeleteAIPlatform",
      requestType: DeleteAIPlatformRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              27,
              42,
              25,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              97,
              105,
              45,
              112,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              115,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Generate an answer from the AI platform */
    generateAnswer: {
      name: "GenerateAnswer",
      requestType: GenerateAnswerRequest,
      requestStream: false,
      responseType: GenerateAnswerResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              39,
              58,
              1,
              42,
              34,
              34,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              97,
              105,
              45,
              112,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              115,
              47,
              123,
              105,
              100,
              125,
              47,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
