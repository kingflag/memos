syntax = "proto3";

package memos.api.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

option go_package = "gen/api/v1";

// Platform type enum
enum PlatformType {
  UNSPECIFIED = 0;
  OLLAMA = 1;
  DEEPSEEK = 2;
}

// AI Platform service definition
service AIPlatformService {
  // Create a new AI platform
  rpc CreateAIPlatform(CreateAIPlatformRequest) returns (AIPlatform) {
    option (google.api.http) = {
      post: "/api/v1/ai-platforms"
      body: "platform"
    };
  }
  
  // List all AI platforms
  rpc ListAIPlatforms(ListAIPlatformsRequest) returns (ListAIPlatformsResponse) {
    option (google.api.http) = {
      get: "/api/v1/ai-platforms"
    };
  }
  
  // List all available platform types
  rpc ListPlatformTypes(ListPlatformTypesRequest) returns (ListPlatformTypesResponse) {
    option (google.api.http) = {
      get: "/api/v1/ai-platforms/types"
    };
  }
  
  // Get a specific AI platform
  rpc GetAIPlatform(GetAIPlatformRequest) returns (AIPlatform) {
    option (google.api.http) = {
      get: "/api/v1/ai-platforms/{id}"
    };
  }
  
  // Update an existing AI platform
  rpc UpdateAIPlatform(UpdateAIPlatformRequest) returns (AIPlatform) {
    option (google.api.http) = {
      patch: "/api/v1/ai-platforms/{platform.id}"
      body: "platform"
    };
  }
  
  // Delete an AI platform
  rpc DeleteAIPlatform(DeleteAIPlatformRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/ai-platforms/{id}"
    };
  }
  
  // Generate an answer from the AI platform
  rpc GenerateAnswer(GenerateAnswerRequest) returns (GenerateAnswerResponse) {
    option (google.api.http) = {
      post: "/api/v1/ai-platforms/{id}/generate"
      body: "*"
    };
  }
}

// AI Platform resource
message AIPlatform {
  // Unique identifier for the platform instance
  int32 id = 1;
  
  // The platform type
  PlatformType platform_type = 2;
  
  // The URL of the AI platform API
  string url = 3;
  
  // The access key for authenticating with the AI platform
  string access_key = 4;
  
  // A user-friendly display name for the AI platform
  string display_name = 5;
  
  // Optional description of the AI platform
  string description = 6;
  
  // The model name to use for this platform
  string model = 7;
  
  // Creation timestamp
  google.protobuf.Timestamp create_time = 8;
  
  // Last update timestamp
  google.protobuf.Timestamp update_time = 9;
}

// Request message for CreateAIPlatform
message CreateAIPlatformRequest {
  // The AI platform to create
  // Note: The id field will be auto-generated by the server if not provided
  AIPlatform platform = 1;
}

// Request message for ListAIPlatforms
message ListAIPlatformsRequest {
  // Maximum number of platforms to return
  int32 page_size = 1;
  
  // Page token received from a previous ListAIPlatforms call
  string page_token = 2;
}

// Response message for ListAIPlatforms
message ListAIPlatformsResponse {
  // The list of AI platforms
  repeated AIPlatform platforms = 1;
  
  // A token to retrieve the next page of results
  string next_page_token = 2;
}

// Request message for GetAIPlatform
message GetAIPlatformRequest {
  // The unique identifier of the AI platform to retrieve
  int32 id = 1;
}

// Request message for UpdateAIPlatform
message UpdateAIPlatformRequest {
  // The AI platform with updated fields
  AIPlatform platform = 1;
  
  // The list of fields to update
  google.protobuf.FieldMask update_mask = 2;
}

// Request message for DeleteAIPlatform
message DeleteAIPlatformRequest {
  // The unique identifier of the AI platform to delete
  int32 id = 1;
}

// Request message for GenerateAnswer
message GenerateAnswerRequest {
  // The unique identifier of the AI platform to use
  int32 id = 1;
  string prompt = 2;
}

// Response message for GenerateAnswer
message GenerateAnswerResponse {
  bool success = 1;
  string answer = 2;
  string error_message = 3;
}

// Request message for ListPlatformTypes
message ListPlatformTypesRequest {
  // Empty request as we just need to list all available types
}

// Response message for ListPlatformTypes
message ListPlatformTypesResponse {
  // List of available platform types
  repeated PlatformType platform_types = 1;
}
