// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1/ai_platform_service.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AIPlatformService_CreateAIPlatform_FullMethodName = "/memos.api.v1.AIPlatformService/CreateAIPlatform"
	AIPlatformService_ListAIPlatforms_FullMethodName  = "/memos.api.v1.AIPlatformService/ListAIPlatforms"
	AIPlatformService_GetAIPlatform_FullMethodName    = "/memos.api.v1.AIPlatformService/GetAIPlatform"
	AIPlatformService_UpdateAIPlatform_FullMethodName = "/memos.api.v1.AIPlatformService/UpdateAIPlatform"
	AIPlatformService_DeleteAIPlatform_FullMethodName = "/memos.api.v1.AIPlatformService/DeleteAIPlatform"
	AIPlatformService_GenerateAnswer_FullMethodName   = "/memos.api.v1.AIPlatformService/GenerateAnswer"
)

// AIPlatformServiceClient is the client API for AIPlatformService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AI Platform service definition
type AIPlatformServiceClient interface {
	// Create a new AI platform
	CreateAIPlatform(ctx context.Context, in *CreateAIPlatformRequest, opts ...grpc.CallOption) (*AIPlatform, error)
	// List all AI platforms
	ListAIPlatforms(ctx context.Context, in *ListAIPlatformsRequest, opts ...grpc.CallOption) (*ListAIPlatformsResponse, error)
	// Get a specific AI platform
	GetAIPlatform(ctx context.Context, in *GetAIPlatformRequest, opts ...grpc.CallOption) (*AIPlatform, error)
	// Update an existing AI platform
	UpdateAIPlatform(ctx context.Context, in *UpdateAIPlatformRequest, opts ...grpc.CallOption) (*AIPlatform, error)
	// Delete an AI platform
	DeleteAIPlatform(ctx context.Context, in *DeleteAIPlatformRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Generate an answer from the AI platform
	GenerateAnswer(ctx context.Context, in *GenerateAnswerRequest, opts ...grpc.CallOption) (*GenerateAnswerResponse, error)
}

type aIPlatformServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAIPlatformServiceClient(cc grpc.ClientConnInterface) AIPlatformServiceClient {
	return &aIPlatformServiceClient{cc}
}

func (c *aIPlatformServiceClient) CreateAIPlatform(ctx context.Context, in *CreateAIPlatformRequest, opts ...grpc.CallOption) (*AIPlatform, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AIPlatform)
	err := c.cc.Invoke(ctx, AIPlatformService_CreateAIPlatform_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIPlatformServiceClient) ListAIPlatforms(ctx context.Context, in *ListAIPlatformsRequest, opts ...grpc.CallOption) (*ListAIPlatformsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAIPlatformsResponse)
	err := c.cc.Invoke(ctx, AIPlatformService_ListAIPlatforms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIPlatformServiceClient) GetAIPlatform(ctx context.Context, in *GetAIPlatformRequest, opts ...grpc.CallOption) (*AIPlatform, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AIPlatform)
	err := c.cc.Invoke(ctx, AIPlatformService_GetAIPlatform_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIPlatformServiceClient) UpdateAIPlatform(ctx context.Context, in *UpdateAIPlatformRequest, opts ...grpc.CallOption) (*AIPlatform, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AIPlatform)
	err := c.cc.Invoke(ctx, AIPlatformService_UpdateAIPlatform_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIPlatformServiceClient) DeleteAIPlatform(ctx context.Context, in *DeleteAIPlatformRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AIPlatformService_DeleteAIPlatform_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIPlatformServiceClient) GenerateAnswer(ctx context.Context, in *GenerateAnswerRequest, opts ...grpc.CallOption) (*GenerateAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateAnswerResponse)
	err := c.cc.Invoke(ctx, AIPlatformService_GenerateAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AIPlatformServiceServer is the server API for AIPlatformService service.
// All implementations must embed UnimplementedAIPlatformServiceServer
// for forward compatibility.
//
// AI Platform service definition
type AIPlatformServiceServer interface {
	// Create a new AI platform
	CreateAIPlatform(context.Context, *CreateAIPlatformRequest) (*AIPlatform, error)
	// List all AI platforms
	ListAIPlatforms(context.Context, *ListAIPlatformsRequest) (*ListAIPlatformsResponse, error)
	// Get a specific AI platform
	GetAIPlatform(context.Context, *GetAIPlatformRequest) (*AIPlatform, error)
	// Update an existing AI platform
	UpdateAIPlatform(context.Context, *UpdateAIPlatformRequest) (*AIPlatform, error)
	// Delete an AI platform
	DeleteAIPlatform(context.Context, *DeleteAIPlatformRequest) (*emptypb.Empty, error)
	// Generate an answer from the AI platform
	GenerateAnswer(context.Context, *GenerateAnswerRequest) (*GenerateAnswerResponse, error)
	mustEmbedUnimplementedAIPlatformServiceServer()
}

// UnimplementedAIPlatformServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAIPlatformServiceServer struct{}

func (UnimplementedAIPlatformServiceServer) CreateAIPlatform(context.Context, *CreateAIPlatformRequest) (*AIPlatform, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAIPlatform not implemented")
}
func (UnimplementedAIPlatformServiceServer) ListAIPlatforms(context.Context, *ListAIPlatformsRequest) (*ListAIPlatformsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAIPlatforms not implemented")
}
func (UnimplementedAIPlatformServiceServer) GetAIPlatform(context.Context, *GetAIPlatformRequest) (*AIPlatform, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAIPlatform not implemented")
}
func (UnimplementedAIPlatformServiceServer) UpdateAIPlatform(context.Context, *UpdateAIPlatformRequest) (*AIPlatform, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAIPlatform not implemented")
}
func (UnimplementedAIPlatformServiceServer) DeleteAIPlatform(context.Context, *DeleteAIPlatformRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAIPlatform not implemented")
}
func (UnimplementedAIPlatformServiceServer) GenerateAnswer(context.Context, *GenerateAnswerRequest) (*GenerateAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAnswer not implemented")
}
func (UnimplementedAIPlatformServiceServer) mustEmbedUnimplementedAIPlatformServiceServer() {}
func (UnimplementedAIPlatformServiceServer) testEmbeddedByValue()                           {}

// UnsafeAIPlatformServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIPlatformServiceServer will
// result in compilation errors.
type UnsafeAIPlatformServiceServer interface {
	mustEmbedUnimplementedAIPlatformServiceServer()
}

func RegisterAIPlatformServiceServer(s grpc.ServiceRegistrar, srv AIPlatformServiceServer) {
	// If the following call pancis, it indicates UnimplementedAIPlatformServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AIPlatformService_ServiceDesc, srv)
}

func _AIPlatformService_CreateAIPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAIPlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIPlatformServiceServer).CreateAIPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIPlatformService_CreateAIPlatform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIPlatformServiceServer).CreateAIPlatform(ctx, req.(*CreateAIPlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIPlatformService_ListAIPlatforms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAIPlatformsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIPlatformServiceServer).ListAIPlatforms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIPlatformService_ListAIPlatforms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIPlatformServiceServer).ListAIPlatforms(ctx, req.(*ListAIPlatformsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIPlatformService_GetAIPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAIPlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIPlatformServiceServer).GetAIPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIPlatformService_GetAIPlatform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIPlatformServiceServer).GetAIPlatform(ctx, req.(*GetAIPlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIPlatformService_UpdateAIPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAIPlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIPlatformServiceServer).UpdateAIPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIPlatformService_UpdateAIPlatform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIPlatformServiceServer).UpdateAIPlatform(ctx, req.(*UpdateAIPlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIPlatformService_DeleteAIPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAIPlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIPlatformServiceServer).DeleteAIPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIPlatformService_DeleteAIPlatform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIPlatformServiceServer).DeleteAIPlatform(ctx, req.(*DeleteAIPlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIPlatformService_GenerateAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIPlatformServiceServer).GenerateAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIPlatformService_GenerateAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIPlatformServiceServer).GenerateAnswer(ctx, req.(*GenerateAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AIPlatformService_ServiceDesc is the grpc.ServiceDesc for AIPlatformService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIPlatformService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "memos.api.v1.AIPlatformService",
	HandlerType: (*AIPlatformServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAIPlatform",
			Handler:    _AIPlatformService_CreateAIPlatform_Handler,
		},
		{
			MethodName: "ListAIPlatforms",
			Handler:    _AIPlatformService_ListAIPlatforms_Handler,
		},
		{
			MethodName: "GetAIPlatform",
			Handler:    _AIPlatformService_GetAIPlatform_Handler,
		},
		{
			MethodName: "UpdateAIPlatform",
			Handler:    _AIPlatformService_UpdateAIPlatform_Handler,
		},
		{
			MethodName: "DeleteAIPlatform",
			Handler:    _AIPlatformService_DeleteAIPlatform_Handler,
		},
		{
			MethodName: "GenerateAnswer",
			Handler:    _AIPlatformService_GenerateAnswer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/ai_platform_service.proto",
}
